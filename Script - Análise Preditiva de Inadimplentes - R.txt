#********************************************************************
#
#       Machine Learning com R
#
#********************************************************************

# Defininfo a pasta de trabalho 
getwd()
setwd("C:/Users/User/Desktop/CursoPowerBI/Cap10")

############################ Pacotes do R ###########################

# Instalando os pacotes para o projeto (os pacotes precisam ser instalador apenas uma vez)
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")

# Carregando os pacotes
library(Amelia)
library(caret)
library(ggplot2)
library(dplyr)
library(reshape)
library(randomForest)

# Carregando os datasets
dataset <- read.csv("credit-card.csv")

# Visualizando os dados e sua estrutura
View(dataset)
str(dataset)
head(dataset)

# Transformando e Limpando os Dados ################################

# Convertendo os atributos idade, sexo, escolaridade e estado civil para fatores (categorias)

# Idade
head(dataset$AGE)
dataset$AGE <- cut(dataset$AGE, c(0,30,50,100), labels = c("Jovem", "Adulto", "Idoso"))
head(dataset$AGE)

#vSexo
head(dataset$SEX)
dataset$SEX <- cut(dataset$SEX, c(0,1,2), labels = c("Masculino", "Feminino"))
head(dataset$SEX)

# Escolaridade
head(dataset$EDUCATION)
dataset$EDUCATION <- cut(dataset$EDUCATION, c(0,1,2,3,4),
                         labels= c("Pós Graduado", "Graduado", "Ensino Médio", "Outros"))
head(dataset$EDUCATION)

# Estado Civil
head(dataset$MARRIAGE)
dataset$MARRIAGE <- cut(dataset$MARRIAGE, c(-1,0,1,2,3), 
                        labels = c("Desconhecido", "Casado", "Solteiro", "Outros"))
head(dataset$MARRIAGE)

# Pagamentos
dataset$PAY_0 <-as.factor(dataset$PAY_0)
dataset$PAY_2 <-as.factor(dataset$PAY_2)
dataset$PAY_3 <-as.factor(dataset$PAY_3)
dataset$PAY_4 <-as.factor(dataset$PAY_4)
dataset$PAY_5 <-as.factor(dataset$PAY_5)
dataset$PAY_6 <-as.factor(dataset$PAY_6)

# Alterando a variável dependente para o tipo fator
dataset$default.payment.next.month <- as.factor(dataset$default.payment.next.month)
head(dataset$default.payment.next.month)
str(dataset)

# Renomeando a coluna de classe
colnames(dataset)
colnames(dataset)[25] <- "Inadimplente"

# Verificando valores missing
sapply(dataset, function(x) sum(is.na(x)))
missmap(dataset, main = "Valores Missing Observados")
dataset <- na.omit(dataset)

# Removendo a primeira coluna ID
dataset$ID <- NULL

# Total de inadimplentes versus no-inadimplentes
table(dataset$Inadimplente)

# Plot de distribuição usando ggplot
qplot(Inadimplente, data =  dataset, geom = "bar") + theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Set the seed
set.seed(12345)

# Amostragem estratificada. Selecione as linnha de acordo com a variable default.payment.next.month como srata
TrainingDataIndex <- createDataPartition(dataset$Inadimplente, p = 0.45, list = FALSE)
TrainingDataIndex

# Criar Dados de Treinamento como subconjunto do conjunto de dados com números de índice de linha 
# conforme identificado acima e todas as colunas
trainData <- dataset[TrainingDataIndex,]
table(trainData$Inadimplente)

# Veja porcentagens entre as aulas
prop.table(table(trainData$Inadimplente))

# Número de linhas em dados de treinamento
nrow(trainData)

# Compara as porcentagens entre as classes de treinamento e dados originais
DistributionCompare <- cbind(prop.table(table(trainData$Inadimplente)), prop.table(table(dataset$Inadimplente)))
colnames(DistributionCompare) <- c("Treinamento", "Original")
DistributionCompare

# Melt Data - Converte colunas em linhas
meltedDComp <- melt(DistributionCompare)
meltedDComp

# Plot para ver a distribuição do treinamento vs original - é representativo ou existe sobre / amostragem?
ggplot(meltedDComp, aes(x = X1, y = value)) + geom_bar( aes(fill = X2), stat = "identity", position = "dodge")

# Tudo o que não está no dataset de treinamento está no dataset de teste. Observe o sinal - (menos)
testData <- dataset[-TrainingDataIndex,]

# Usaremos uma validação cruzada de 10 folds para treinar e avaliar modelo
TrainingParameters <- trainControl(method = "cv", number = 10)

######### Random Forest Classification Model
rf_model <- randomForest(Inadimplente ~ ., data = trainData)
rf_model

# COnferindo o erro do modelo
plot(rf_model, ylim = c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col = 1:3, fill = 1:3)

varImpPlot(rf_model)

# Obtendo as variáveis mais importantes
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[,'MeanDecreaseGini'],2))

# Criando o Rank de variáveis baseado na importância
rankImportance <- varImportance %>%
  mutate(Rank = paste0('#', dense_rank(desc(Importance))))

# Usando ggplot2 para visualizar a importância relativa das variáveis
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + 
  geom_bar(stat='identity') + 
  geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust=0, vjust=0.55, size=4, colour = 'red') + 
  labs(x='Variables') +
  coord_flip()

# Previsões
predictionrf <- predict(rf_model, testData)

# Confusion Matrix
cmrf <- confusionMatrix(predictionrf, testData$Inadimplente, positive = "1")
cmrf

# Salvado o modelo 
saveRDS(rf_model, file = "rf_model.rds")
 
# Carregando o modelo 
modelo <- readRDS("rf_model.rds")